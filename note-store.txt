<div className="res-card" style={{backgroundColor: "#f0f0f0"}}> 
This is how we give inline css to JSX

const styleCard = {
  backgroundColor: "#f0f0f0",
}

or we can just make style={styleCard}

<RestaurantCard resName="Meghna Foods" cuisine="Biryani, North Indian, Asian"/> this is called passing props to the component

props are object

const RestaurantCard = (props) => {
  return (
    <div className="res-card" style={styleCard}>
    .......
      <h3>{props.resName}</h3>
      <h4>{props.cuisine}</h4>
      <h4>4.4 stars</h4>
      <h4>38 minutes</h4>
    </div>
  )
};

const RestaurantCard = ({resName, cuisine}) => {...} --> destructuring on the fly

config driven ui

https://github.com/namastedev/namaste-react

const RestaurantCard = (props) => {
  const { resData } = props;

  const {cloudinaryImageId, name, avgRating, cuisines, costForTwo, deliveryTime,} = resData?.data;
}

        <RestaurantCard resData={resList[0]} />

        {resList.map((restaurant) => (<RestaurantCard key={restaurant.data.id} resData={restaurant} />))}

not using keys (not acceptable) <<< index as key <<<<<< unique id (best practise)

crete seperate file for components

for componenets we can use .js or .jsx

export default Header;

import Header from "./components/Header"; // we dont need to write Header.js/jsx here but it won't
effect it its all upto us if we keep the extension or not

    export const CDN_URL = "https://res.cloudinary.com/swiggy/image/upload/fl_lossy,f_auto,q_auto,w_508,h_320,c_fill/";

    export const LOGO_URL = "https://www.logodesign.net/logo/smoking-burger-with-lettuce-3624ld.png";

this is how we export two components from a single file (also called named imports)

    import { CDN_URL } from "../utils/constants";
    import { LOGO_URL } from "../utils/constants";

  # Reconciliation Algorithm (React Fiber)

  # Optional chaining -- json?.data?.cards[1]?.card?.....

  # whenever the state variable changes react triggers a reconciliation cycle (re-renders the component)


  # 
  // If no dependency array -> useEffect is called on every render
  // If dependecy array is empty = [] -> useEffect is called on initial render and just once
  // If dependency array is [btmNameReact] -> called everytime btnNameReact is updated

  useEffect(() => {
    console.log("Use effect called")
  }, [btmNameReact]);


  use rafce (code snipper by react+ extension to create a component)

- npm i react-router-dom
import { createBrowserRouter, RouterProvider, Outlet } from "react-router-dom";

see the changes in App.js After Episode-07;

Class Based Coponent and Functional Component -> view code of About US Section

// Learn about mounting and unmounting in useEffect -> using return () => {};

Accordion body 

Control Component & Uncuntrolled Component
  - lifting the state up
  - https://react.dev/learn/sharing-state-between-components#lifting-state-up-by-example
  - Advance concept

props drilling  -> many sol -> react context
how to use usercontext in functional component and class component (About Us page)

    onClick={() => handleAddItem(item)}
    onClick={handleAddItem(item)} // we can't do this because we have to pass a callback fn to onClick